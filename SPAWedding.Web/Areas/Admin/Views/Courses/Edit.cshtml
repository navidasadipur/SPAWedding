@model SPAWedding.Core.Models.Course

@{
    ViewBag.Title = "کلاس ها";
}
<input type="hidden" id="nav_active" value="course_control">
<input type="hidden" id="nav_item_active" value="courses">
@{
    if (ViewBag.Message != null)
    {
        <div class="alert alert-danger">
            <strong>خطا!</strong> @ViewBag.Message
        </div>
    }
}
<div class="col-lg-12y">
    <div class="card card-custom gutter-b">
        <div class="card-header">
            <h3 class="card-title">
                ویرایش کلاس
            </h3>
        </div>
        @using (Html.BeginForm("Edit", "Courses", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()

            <div class="card-body">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.Id)
                @Html.HiddenFor(model => model.AddedDate)
                @Html.HiddenFor(model => model.UserId)
                @Html.HiddenFor(model => model.ViewCount)
                @Html.HiddenFor(model => model.Image)
                @Html.HiddenFor(model => model.InsertDate)
                @Html.HiddenFor(model => model.InsertUser)
                <div class="form-group">
                    @Html.LabelFor(model => model.Title, new { })
                    <div class="col-md-5">
                        @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control " } })
                        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "form-text text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.CourseCategoryId, "دسته بندی", new { })
                    <div class="col-md-5">
                        @Html.DropDownList("CourseCategoryId", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.CourseCategoryId, "", new { @class = "form-text text-danger" })
                    </div>
                </div>
                <div class="row col-md-12">
                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.CourseAuthorId, "مدرس", new { })

                            @Html.DropDownList("CourseAuthorId", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.CourseAuthorId, "", new { @class = "form-text text-danger" })

                        </div>
                    </div>
                    <div class="col-md-2">
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.SessionsNumber, new { })

                            @Html.EditorFor(model => model.SessionsNumber, new { htmlAttributes = new { @class = "form-control " } })
                            @Html.ValidationMessageFor(model => model.SessionsNumber, "", new { @class = "form-text text-danger" })
                        </div>
                    </div>
                </div>
                <div class="row col-md-12">
                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.StartDate, new { })

                            <script src="~/Content/admin/Vendors/Clockpicker/bootstrap-clockPicker.min.js"></script>
                            <script src="~/Content/admin/Vendors/kamaDatepicker/kamadatepicker.min.js"></script>
                            @Html.EditorFor(Model => Model.StartDate, new { htmlAttributes = new { @class = "form-control ", type = "hidden" } })
                            @{
                                var stratDate = "";
                                if (Model.StartDate != null)
                                {
                                    stratDate = Model.StartDate.ToString().Split(' ')[0];

                                    System.Globalization.PersianCalendar pc = new System.Globalization.PersianCalendar();

                                    stratDate = pc.GetYear(Model.StartDate.Value).ToString();
                                    stratDate += "/";
                                    stratDate += pc.GetMonth(Model.StartDate.Value) < 10 ? "0" + pc.GetMonth(Model.StartDate.Value) : pc.GetMonth(Model.StartDate.Value).ToString();
                                    stratDate += "/";
                                    stratDate += pc.GetDayOfMonth(Model.StartDate.Value) < 10 ? "0" + pc.GetDayOfMonth(Model.StartDate.Value) : pc.GetDayOfMonth(Model.StartDate.Value).ToString();
                                }
                            }
                            <div class="form-group">
                                <div class="col-md-10">
                                    <div class="datetime-picker-wrapper">
                                        @*<input type="text" id="txtStartDate" name="txtStartDate" value="@stratDate" class="txtStartDate datepicker-input form-control" onchange="HidePicker(event, 'txtStartTime')" placeholder="تاریخ" autocomplete="off" />*@
                                        <input type="text" id="txtStartDate" name="txtStartDate" value="@stratDate" class="txtStartDate datepicker-input" onchange="HidePicker(event, 'txtEndTime')" placeholder="تاریخ" autocomplete="off" required />
                                        <script type="text/javascript">
                                            var customOptions = {
                                                placeholder: "روز / ماه / سال"
                                                , twodigit: false
                                                , closeAfterSelect: false
                                                , nextButtonIcon: "fa fa-arrow-circle-right"
                                                , previousButtonIcon: "fa fa-arrow-circle-left"
                                                , buttonsColor: "blue"
                                                , forceFarsiDigits: true
                                                , markToday: true
                                                , markHolidays: true
                                                , highlightSelectedDay: true
                                                , sync: true
                                                , gotoToday: true
                                            }
                                            kamaDatepicker('txtStartDate', customOptions);
                                        </script>
                                    </div>
                                </div>
                            </div>
                            @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "form-text text-danger" })
                        </div>
                    </div>
                    <div class="col-md-2">
                    </div>
                    <div class="col-md-4">
                            <div class="form-group">
                                @Html.LabelFor(model => model.EndDate, new { })

                                @Html.EditorFor(Model => Model.EndDate, new { htmlAttributes = new { @class = "form-control ", type = "hidden" } })
                                @{
                                var endDate = "";
                                if (Model.EndDate != null)
                                {
                                    endDate = Model.EndDate.ToString().Split(' ')[0];

                                    System.Globalization.PersianCalendar pc = new System.Globalization.PersianCalendar();

                                    endDate = pc.GetYear(Model.EndDate.Value).ToString();
                                    endDate += "/";
                                    endDate += pc.GetMonth(Model.EndDate.Value) < 10 ? "0" + pc.GetMonth(Model.EndDate.Value) : pc.GetMonth(Model.EndDate.Value).ToString();
                                    endDate += "/";
                                    endDate += pc.GetDayOfMonth(Model.EndDate.Value) < 10 ? "0" + pc.GetDayOfMonth(Model.EndDate.Value) : pc.GetDayOfMonth(Model.EndDate.Value).ToString();
                                }
                                }
                                <div class="form-group">
                                    <div class="col-md-10">
                                        <div class="datetime-picker-wrapper">
                                            <input type="text" id="txtEndDate" name="txtEndDate" value="@endDate" class="txtStartDate datepicker-input form-control" onchange="HidePicker(event, 'txtEndTime')" placeholder="تاریخ" autocomplete="off" />
                                            <script type="text/javascript">
                                                var customOptions = {
                                                    placeholder: "روز / ماه / سال"
                                                    , twodigit: false
                                                    , closeAfterSelect: false
                                                    , nextButtonIcon: "fa fa-arrow-circle-right"
                                                    , previousButtonIcon: "fa fa-arrow-circle-left"
                                                    , buttonsColor: "blue"
                                                    , forceFarsiDigits: true
                                                    , markToday: true
                                                    , markHolidays: true
                                                    , highlightSelectedDay: true
                                                    , sync: true
                                                    , gotoToday: true
                                                }
                                                kamaDatepicker('txtEndDate', customOptions);
                                            </script>
                                        </div>
                                    </div>
                                </div>
                                @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "form-text text-danger" })

                            </div>
                        </div>
                </div>
                <div class="form-group">
                    <label class="col-label">تصویر</label>
                    <div class="col-lg-6 col-md-12 col-sm-12">
                        <div class="image-input image-input-outline" id="course-image">
                            <div class="image-input-wrapper" style="background-image: url(/Files/CourseImages/Thumb/@Model.Image)"></div>

                            <label class="btn btn-xs btn-icon btn-circle btn-white btn-hover-text-primary btn-shadow" data-action="change" data-toggle="tooltip" title="" data-original-title="آپلود تصویر">
                                <i class="fa fa-pen icon-sm text-muted"></i>
                                <input type="file" name="CourseImage" accept=".png, .jpg, .jpeg" />
                                <input type="hidden" name="course_image_remove" />
                            </label>

                            <span class="btn btn-xs btn-icon btn-circle btn-white btn-hover-text-primary btn-shadow" data-action="cancel" data-toggle="tooltip" title="حذف تصویر">
                                <i class="ki ki-bold-close icon-xs text-muted"></i>
                            </span>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.ShortDescription, new { })
                    @Html.EditorFor(model => model.ShortDescription, new { htmlAttributes = new { @class = "form-control " } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "form-text text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Description, new { })
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control " } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "form-text text-danger" })
                </div>
                <div class="form-group">
                    <label for="CourseTags">برچسب ها</label>
                    <input type="text" name="Tags" id="Tags" value="@ViewBag.Tags" placeholder="لطفا برچسب ها را با - از هم جدا کنید" class="form-control" />
                </div>
            </div>
            <div class="card-footer">
                <a href="@Url.Action("Index")" class="btn btn-secondary">انصراف</a>
                <input type="submit" value="ثبت" class="btn btn-primary mr-2" />
            </div>
        }
    </div>
</div>
<style>
    .image-input .image-input-wrapper {
        width: 200px;
    }
</style>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="/ckeditor/ckeditor.js"></script>
    <script src="/ckeditor/adapters/jquery.js"></script>
    <script>
        function HidePicker(e, next) {
            e.target.nextSibling.classList.add("bd-hide");

            console.log($("#" + next));
            $("#" + next).focus();
            PutEndDate();
            PutStartDate()
        }

        function PutEndDate() {
            var date = $("#txtEndDate").val();
            $("#EndDate").val(date);
        }

        function PutStartDate() {
            var date = $("#txtStartDate").val();
            console.log(date);
            $("#StartDate").val(date);
        }
    </script>
    <script>
        $(function () {
            $('#Description').ckeditor();

        });
        var avatar1 = new KTImageInput('course-image');
    </script>
}